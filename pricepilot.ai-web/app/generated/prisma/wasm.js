/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, '__esModule', { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js');

const Prisma = {};

exports.Prisma = Prisma;
exports.$Enums = {};

/**
 * Prisma Client JS version: 6.17.0
 * Query Engine version: c0aafc03b8ef6cdced8654b9a817999e02457d6a
 */
Prisma.prismaVersion = {
  client: '6.17.0',
  engine: 'c0aafc03b8ef6cdced8654b9a817999e02457d6a',
};

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError;
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError;
Prisma.PrismaClientInitializationError = PrismaClientInitializationError;
Prisma.PrismaClientValidationError = PrismaClientValidationError;
Prisma.Decimal = Decimal;

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag;
Prisma.empty = empty;
Prisma.join = join;
Prisma.raw = raw;
Prisma.validator = Public.validator;

/**
 * Extensions
 */
Prisma.getExtensionContext = Extensions.getExtensionContext;
Prisma.defineExtension = Extensions.defineExtension;

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull;
Prisma.JsonNull = objectEnumValues.instances.JsonNull;
Prisma.AnyNull = objectEnumValues.instances.AnyNull;

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull,
};

/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable',
});

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  sku: 'sku',
  name: 'name',
  category: 'category',
  brand: 'brand',
  unitCost: 'unitCost',
  basePrice: 'basePrice',
  currentPrice: 'currentPrice',
  holdingCostPerUnitPerDay: 'holdingCostPerUnitPerDay',
  clearanceEndDate: 'clearanceEndDate',
  status: 'status',
  createdAt: 'createdAt',
};

exports.Prisma.InventoryScalarFieldEnum = {
  productId: 'productId',
  location: 'location',
  stockOnHand: 'stockOnHand',
  reserved: 'reserved',
};

exports.Prisma.PriceHistoryScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  price: 'price',
  markdownPct: 'markdownPct',
  startedAt: 'startedAt',
  endedAt: 'endedAt',
};

exports.Prisma.SalesDailyScalarFieldEnum = {
  productId: 'productId',
  saleDate: 'saleDate',
  unitsSold: 'unitsSold',
  avgUnitPrice: 'avgUnitPrice',
  promoFlag: 'promoFlag',
};

exports.Prisma.ElasticityEstimateScalarFieldEnum = {
  productId: 'productId',
  elasticity: 'elasticity',
  method: 'method',
  sampleSize: 'sampleSize',
  confidence: 'confidence',
  lastUpdated: 'lastUpdated',
};

exports.Prisma.CompetitorScalarFieldEnum = {
  id: 'id',
  name: 'name',
  url: 'url',
};

exports.Prisma.CompetitorPriceScalarFieldEnum = {
  competitorId: 'competitorId',
  productId: 'productId',
  priceDate: 'priceDate',
  price: 'price',
};

exports.Prisma.MarkdownEvaluationScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  evaluatedAt: 'evaluatedAt',
  baselinePrice: 'baselinePrice',
  baselineExpectedUnits: 'baselineExpectedUnits',
  baselineExpectedProfit: 'baselineExpectedProfit',
  markdownPct: 'markdownPct',
  candidatePrice: 'candidatePrice',
  expectedUnits: 'expectedUnits',
  expectedProfit: 'expectedProfit',
  expectedDaysToSell: 'expectedDaysToSell',
  expectedUnsoldUnits: 'expectedUnsoldUnits',
  isOptimal: 'isOptimal',
};

exports.Prisma.MarkdownActionLogScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  executedAt: 'executedAt',
  beforePrice: 'beforePrice',
  afterPrice: 'afterPrice',
  stockAtAction: 'stockAtAction',
  expectedProfit: 'expectedProfit',
  baselineProfit: 'baselineProfit',
  deltaExpectedProfit: 'deltaExpectedProfit',
  notes: 'notes',
};

exports.Prisma.ActionOutcomeScalarFieldEnum = {
  actionId: 'actionId',
  windowStart: 'windowStart',
  windowEnd: 'windowEnd',
  actualUnitsSold: 'actualUnitsSold',
  actualProfit: 'actualProfit',
};

exports.Prisma.SettingScalarFieldEnum = {
  key: 'key',
  value: 'value',
  updatedAt: 'updatedAt',
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc',
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull,
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive',
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last',
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull,
};
exports.ProductStatus = exports.$Enums.ProductStatus = {
  active: 'active',
  discontinued: 'discontinued',
};

exports.Prisma.ModelName = {
  Product: 'Product',
  Inventory: 'Inventory',
  PriceHistory: 'PriceHistory',
  SalesDaily: 'SalesDaily',
  ElasticityEstimate: 'ElasticityEstimate',
  Competitor: 'Competitor',
  CompetitorPrice: 'CompetitorPrice',
  MarkdownEvaluation: 'MarkdownEvaluation',
  MarkdownActionLog: 'MarkdownActionLog',
  ActionOutcome: 'ActionOutcome',
  Setting: 'Setting',
};
/**
 * Create the Client
 */
const config = {
  generator: {
    name: 'client',
    provider: {
      fromEnvVar: null,
      value: 'prisma-client-js',
    },
    output: {
      value:
        'D:\\MyWorkspaces\\_MyRepos\\Github\\pricepilot.ai\\pricepilot.ai-web\\app\\generated\\prisma',
      fromEnvVar: null,
    },
    config: {
      engineType: 'library',
    },
    binaryTargets: [
      {
        fromEnvVar: null,
        value: 'windows',
        native: true,
      },
    ],
    previewFeatures: [],
    sourceFilePath:
      'D:\\MyWorkspaces\\_MyRepos\\Github\\pricepilot.ai\\pricepilot.ai-web\\prisma\\schema.prisma',
    isCustomOutput: true,
  },
  relativeEnvPaths: {
    rootEnvPath: '../../../.env',
    schemaEnvPath: '../../../.env',
  },
  relativePath: '../../../prisma',
  clientVersion: '6.17.0',
  engineVersion: 'c0aafc03b8ef6cdced8654b9a817999e02457d6a',
  datasourceNames: ['db'],
  activeProvider: 'postgresql',
  inlineDatasources: {
    db: {
      url: {
        fromEnvVar: 'DATABASE_URL',
        value: null,
      },
    },
  },
  inlineSchema:
    '// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ngenerator client {\n  provider = "prisma-client-js"\n  output   = "../app/generated/prisma"\n}\n\ndatasource repositories {\n  provider = "postgresql"\n  url      = env("DATABASE_URL")\n}\n\nenum ProductStatus {\n  active\n  discontinued\n}\n\nmodel Product {\n  id                       BigInt        @id @default(autoincrement()) @map("product_id")\n  sku                      String        @unique\n  name                     String\n  category                 String?\n  brand                    String?\n  unitCost                 Decimal       @map("unit_cost") @repositories.Decimal(12, 4)\n  basePrice                Decimal       @map("base_price") @repositories.Decimal(12, 4)\n  currentPrice             Decimal       @map("current_price") @repositories.Decimal(12, 4)\n  holdingCostPerUnitPerDay Decimal       @default(0) @map("holding_cost_per_unit_per_day") @repositories.Decimal(12, 4)\n  clearanceEndDate         DateTime      @map("clearance_end_date") @repositories.Date\n  status                   ProductStatus @default(active)\n  createdAt                DateTime      @default(now()) @map("created_at") @repositories.Timestamptz\n\n  inventories         Inventory[]\n  priceHistories      PriceHistory[]\n  sales               SalesDaily[]\n  elasticityEstimate  ElasticityEstimate?\n  competitorPrices    CompetitorPrice[]\n  markdownEvaluations MarkdownEvaluation[]\n  markdownActions     MarkdownActionLog[]\n\n  @@index([clearanceEndDate], map: "idx_products_clearance_end_date")\n  @@map("products")\n}\n\nmodel Inventory {\n  productId   BigInt @map("product_id")\n  location    String @default("main")\n  stockOnHand Int    @map("stock_on_hand")\n  reserved    Int    @default(0)\n\n  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)\n\n  @@id([productId, location])\n  @@map("inventory")\n}\n\nmodel PriceHistory {\n  id          BigInt    @id @default(autoincrement()) @map("price_id")\n  productId   BigInt    @map("product_id")\n  price       Decimal   @repositories.Decimal(12, 4)\n  markdownPct Decimal   @default(0) @map("markdown_pct") @repositories.Decimal(5, 2)\n  startedAt   DateTime  @default(now()) @map("started_at") @repositories.Timestamptz\n  endedAt     DateTime? @map("ended_at") @repositories.Timestamptz\n\n  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)\n\n  @@map("price_history")\n}\n\nmodel SalesDaily {\n  productId    BigInt   @map("product_id")\n  saleDate     DateTime @map("sale_date") @repositories.Date\n  unitsSold    Int      @map("units_sold")\n  avgUnitPrice Decimal  @map("avg_unit_price") @repositories.Decimal(12, 4)\n  promoFlag    Boolean  @default(false) @map("promo_flag")\n\n  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)\n\n  @@id([productId, saleDate])\n  @@index([saleDate], map: "idx_sales_daily_date")\n  @@map("sales_daily")\n}\n\nmodel ElasticityEstimate {\n  productId   BigInt   @id @map("product_id")\n  elasticity  Decimal  @repositories.Decimal(8, 4)\n  method      String\n  sampleSize  Int?     @map("sample_size")\n  confidence  Decimal? @repositories.Decimal(5, 2)\n  lastUpdated DateTime @default(now()) @map("last_updated") @repositories.Timestamptz\n\n  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)\n\n  @@map("elasticity_estimates")\n}\n\nmodel Competitor {\n  id   BigInt  @id @default(autoincrement()) @map("competitor_id")\n  name String  @unique\n  url  String?\n\n  prices CompetitorPrice[]\n\n  @@map("competitors")\n}\n\nmodel CompetitorPrice {\n  competitorId BigInt   @map("competitor_id")\n  productId    BigInt   @map("product_id")\n  priceDate    DateTime @map("price_date") @repositories.Date\n  price        Decimal  @repositories.Decimal(12, 4)\n\n  competitor Competitor @relation(fields: [competitorId], references: [id], onDelete: Cascade)\n  product    Product    @relation(fields: [productId], references: [id], onDelete: Cascade)\n\n  @@id([competitorId, productId, priceDate])\n  @@index([priceDate], map: "idx_competitor_prices_date")\n  @@map("competitor_prices")\n}\n\nmodel MarkdownEvaluation {\n  id                     BigInt   @id @default(autoincrement()) @map("eval_id")\n  productId              BigInt   @map("product_id")\n  evaluatedAt            DateTime @default(now()) @map("evaluated_at") @repositories.Timestamptz\n  baselinePrice          Decimal  @map("baseline_price") @repositories.Decimal(12, 4)\n  baselineExpectedUnits  Int      @map("baseline_expected_units")\n  baselineExpectedProfit Decimal  @map("baseline_expected_profit") @repositories.Decimal(14, 4)\n  markdownPct            Decimal  @map("markdown_pct") @repositories.Decimal(5, 2)\n  candidatePrice         Decimal  @map("candidate_price") @repositories.Decimal(12, 4)\n  expectedUnits          Int      @map("expected_units")\n  expectedProfit         Decimal  @map("expected_profit") @repositories.Decimal(14, 4)\n  expectedDaysToSell     Int?     @map("expected_days_to_sell")\n  expectedUnsoldUnits    Int?     @map("expected_unsold_units")\n  isOptimal              Boolean  @default(false) @map("is_optimal")\n\n  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)\n\n  @@map("markdown_evaluations")\n}\n\nmodel MarkdownActionLog {\n  id                  BigInt   @id @default(autoincrement()) @map("action_id")\n  productId           BigInt   @map("product_id")\n  executedAt          DateTime @default(now()) @map("executed_at") @repositories.Timestamptz\n  beforePrice         Decimal  @map("before_price") @repositories.Decimal(12, 4)\n  afterPrice          Decimal  @map("after_price") @repositories.Decimal(12, 4)\n  stockAtAction       Int      @map("stock_at_action")\n  expectedProfit      Decimal  @map("expected_profit") @repositories.Decimal(14, 4)\n  baselineProfit      Decimal  @map("baseline_profit") @repositories.Decimal(14, 4)\n  deltaExpectedProfit Decimal  @map("delta_expected_profit") @repositories.Decimal(14, 4)\n  notes               String?\n\n  product  Product         @relation(fields: [productId], references: [id], onDelete: Cascade)\n  outcomes ActionOutcome[]\n\n  @@map("markdown_actions_log")\n}\n\nmodel ActionOutcome {\n  actionId        BigInt   @map("action_id")\n  windowStart     DateTime @map("window_start") @repositories.Timestamptz\n  windowEnd       DateTime @map("window_end") @repositories.Timestamptz\n  actualUnitsSold Int      @map("actual_units_sold")\n  actualProfit    Decimal  @map("actual_profit") @repositories.Decimal(14, 4)\n\n  action MarkdownActionLog @relation(fields: [actionId], references: [id], onDelete: Cascade)\n\n  @@id([actionId, windowStart, windowEnd])\n  @@map("action_outcomes")\n}\n\nmodel Setting {\n  key       String   @id\n  value     Json     @repositories.JsonB\n  updatedAt DateTime @default(now()) @map("updated_at") @repositories.Timestamptz\n\n  @@map("settings")\n}\n',
  inlineSchemaHash:
    '04dc67feddcaadc9893dbc3bf898a72a18f36c386428b429685f11faa00117ae',
  copyEngine: false,
};
config.dirname = '/';

config.runtimeDataModel = JSON.parse(
  '{"models":{"Product":{"fields":[{"name":"id","kind":"scalar","type":"BigInt","dbName":"product_id"},{"name":"sku","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"category","kind":"scalar","type":"String"},{"name":"brand","kind":"scalar","type":"String"},{"name":"unitCost","kind":"scalar","type":"Decimal","dbName":"unit_cost"},{"name":"basePrice","kind":"scalar","type":"Decimal","dbName":"base_price"},{"name":"currentPrice","kind":"scalar","type":"Decimal","dbName":"current_price"},{"name":"holdingCostPerUnitPerDay","kind":"scalar","type":"Decimal","dbName":"holding_cost_per_unit_per_day"},{"name":"clearanceEndDate","kind":"scalar","type":"DateTime","dbName":"clearance_end_date"},{"name":"status","kind":"enum","type":"ProductStatus"},{"name":"createdAt","kind":"scalar","type":"DateTime","dbName":"created_at"},{"name":"inventories","kind":"object","type":"Inventory","relationName":"InventoryToProduct"},{"name":"priceHistories","kind":"object","type":"PriceHistory","relationName":"PriceHistoryToProduct"},{"name":"sales","kind":"object","type":"SalesDaily","relationName":"ProductToSalesDaily"},{"name":"elasticityEstimate","kind":"object","type":"ElasticityEstimate","relationName":"ElasticityEstimateToProduct"},{"name":"competitorPrices","kind":"object","type":"CompetitorPrice","relationName":"CompetitorPriceToProduct"},{"name":"markdownEvaluations","kind":"object","type":"MarkdownEvaluation","relationName":"MarkdownEvaluationToProduct"},{"name":"markdownActions","kind":"object","type":"MarkdownActionLog","relationName":"MarkdownActionLogToProduct"}],"dbName":"products"},"Inventory":{"fields":[{"name":"productId","kind":"scalar","type":"BigInt","dbName":"product_id"},{"name":"location","kind":"scalar","type":"String"},{"name":"stockOnHand","kind":"scalar","type":"Int","dbName":"stock_on_hand"},{"name":"reserved","kind":"scalar","type":"Int"},{"name":"product","kind":"object","type":"Product","relationName":"InventoryToProduct"}],"dbName":"inventory"},"PriceHistory":{"fields":[{"name":"id","kind":"scalar","type":"BigInt","dbName":"price_id"},{"name":"productId","kind":"scalar","type":"BigInt","dbName":"product_id"},{"name":"price","kind":"scalar","type":"Decimal"},{"name":"markdownPct","kind":"scalar","type":"Decimal","dbName":"markdown_pct"},{"name":"startedAt","kind":"scalar","type":"DateTime","dbName":"started_at"},{"name":"endedAt","kind":"scalar","type":"DateTime","dbName":"ended_at"},{"name":"product","kind":"object","type":"Product","relationName":"PriceHistoryToProduct"}],"dbName":"price_history"},"SalesDaily":{"fields":[{"name":"productId","kind":"scalar","type":"BigInt","dbName":"product_id"},{"name":"saleDate","kind":"scalar","type":"DateTime","dbName":"sale_date"},{"name":"unitsSold","kind":"scalar","type":"Int","dbName":"units_sold"},{"name":"avgUnitPrice","kind":"scalar","type":"Decimal","dbName":"avg_unit_price"},{"name":"promoFlag","kind":"scalar","type":"Boolean","dbName":"promo_flag"},{"name":"product","kind":"object","type":"Product","relationName":"ProductToSalesDaily"}],"dbName":"sales_daily"},"ElasticityEstimate":{"fields":[{"name":"productId","kind":"scalar","type":"BigInt","dbName":"product_id"},{"name":"elasticity","kind":"scalar","type":"Decimal"},{"name":"method","kind":"scalar","type":"String"},{"name":"sampleSize","kind":"scalar","type":"Int","dbName":"sample_size"},{"name":"confidence","kind":"scalar","type":"Decimal"},{"name":"lastUpdated","kind":"scalar","type":"DateTime","dbName":"last_updated"},{"name":"product","kind":"object","type":"Product","relationName":"ElasticityEstimateToProduct"}],"dbName":"elasticity_estimates"},"Competitor":{"fields":[{"name":"id","kind":"scalar","type":"BigInt","dbName":"competitor_id"},{"name":"name","kind":"scalar","type":"String"},{"name":"url","kind":"scalar","type":"String"},{"name":"prices","kind":"object","type":"CompetitorPrice","relationName":"CompetitorToCompetitorPrice"}],"dbName":"competitors"},"CompetitorPrice":{"fields":[{"name":"competitorId","kind":"scalar","type":"BigInt","dbName":"competitor_id"},{"name":"productId","kind":"scalar","type":"BigInt","dbName":"product_id"},{"name":"priceDate","kind":"scalar","type":"DateTime","dbName":"price_date"},{"name":"price","kind":"scalar","type":"Decimal"},{"name":"competitor","kind":"object","type":"Competitor","relationName":"CompetitorToCompetitorPrice"},{"name":"product","kind":"object","type":"Product","relationName":"CompetitorPriceToProduct"}],"dbName":"competitor_prices"},"MarkdownEvaluation":{"fields":[{"name":"id","kind":"scalar","type":"BigInt","dbName":"eval_id"},{"name":"productId","kind":"scalar","type":"BigInt","dbName":"product_id"},{"name":"evaluatedAt","kind":"scalar","type":"DateTime","dbName":"evaluated_at"},{"name":"baselinePrice","kind":"scalar","type":"Decimal","dbName":"baseline_price"},{"name":"baselineExpectedUnits","kind":"scalar","type":"Int","dbName":"baseline_expected_units"},{"name":"baselineExpectedProfit","kind":"scalar","type":"Decimal","dbName":"baseline_expected_profit"},{"name":"markdownPct","kind":"scalar","type":"Decimal","dbName":"markdown_pct"},{"name":"candidatePrice","kind":"scalar","type":"Decimal","dbName":"candidate_price"},{"name":"expectedUnits","kind":"scalar","type":"Int","dbName":"expected_units"},{"name":"expectedProfit","kind":"scalar","type":"Decimal","dbName":"expected_profit"},{"name":"expectedDaysToSell","kind":"scalar","type":"Int","dbName":"expected_days_to_sell"},{"name":"expectedUnsoldUnits","kind":"scalar","type":"Int","dbName":"expected_unsold_units"},{"name":"isOptimal","kind":"scalar","type":"Boolean","dbName":"is_optimal"},{"name":"product","kind":"object","type":"Product","relationName":"MarkdownEvaluationToProduct"}],"dbName":"markdown_evaluations"},"MarkdownActionLog":{"fields":[{"name":"id","kind":"scalar","type":"BigInt","dbName":"action_id"},{"name":"productId","kind":"scalar","type":"BigInt","dbName":"product_id"},{"name":"executedAt","kind":"scalar","type":"DateTime","dbName":"executed_at"},{"name":"beforePrice","kind":"scalar","type":"Decimal","dbName":"before_price"},{"name":"afterPrice","kind":"scalar","type":"Decimal","dbName":"after_price"},{"name":"stockAtAction","kind":"scalar","type":"Int","dbName":"stock_at_action"},{"name":"expectedProfit","kind":"scalar","type":"Decimal","dbName":"expected_profit"},{"name":"baselineProfit","kind":"scalar","type":"Decimal","dbName":"baseline_profit"},{"name":"deltaExpectedProfit","kind":"scalar","type":"Decimal","dbName":"delta_expected_profit"},{"name":"notes","kind":"scalar","type":"String"},{"name":"product","kind":"object","type":"Product","relationName":"MarkdownActionLogToProduct"},{"name":"outcomes","kind":"object","type":"ActionOutcome","relationName":"ActionOutcomeToMarkdownActionLog"}],"dbName":"markdown_actions_log"},"ActionOutcome":{"fields":[{"name":"actionId","kind":"scalar","type":"BigInt","dbName":"action_id"},{"name":"windowStart","kind":"scalar","type":"DateTime","dbName":"window_start"},{"name":"windowEnd","kind":"scalar","type":"DateTime","dbName":"window_end"},{"name":"actualUnitsSold","kind":"scalar","type":"Int","dbName":"actual_units_sold"},{"name":"actualProfit","kind":"scalar","type":"Decimal","dbName":"actual_profit"},{"name":"action","kind":"object","type":"MarkdownActionLog","relationName":"ActionOutcomeToMarkdownActionLog"}],"dbName":"action_outcomes"},"Setting":{"fields":[{"name":"key","kind":"scalar","type":"String"},{"name":"value","kind":"scalar","type":"Json"},{"name":"updatedAt","kind":"scalar","type":"DateTime","dbName":"updated_at"}],"dbName":"settings"}},"enums":{},"types":{}}',
);
defineDmmfProperty(exports.Prisma, config.runtimeDataModel);
config.engineWasm = undefined;
config.compilerWasm = undefined;

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL:
      (typeof globalThis !== 'undefined' && globalThis['DATABASE_URL']) ||
      (typeof process !== 'undefined' &&
        process.env &&
        process.env.DATABASE_URL) ||
      undefined,
  },
});

if (
  (typeof globalThis !== 'undefined' && globalThis['DEBUG']) ||
  (typeof process !== 'undefined' && process.env && process.env.DEBUG) ||
  undefined
) {
  Debug.enable(
    (typeof globalThis !== 'undefined' && globalThis['DEBUG']) ||
      (typeof process !== 'undefined' && process.env && process.env.DEBUG) ||
      undefined,
  );
}

const PrismaClient = getPrismaClient(config);
exports.PrismaClient = PrismaClient;
Object.assign(exports, Prisma);
