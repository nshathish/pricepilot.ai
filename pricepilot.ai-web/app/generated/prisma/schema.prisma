// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProductStatus {
  active
  discontinued
}

model Product {
  id                       BigInt        @id @default(autoincrement()) @map("product_id")
  sku                      String        @unique
  name                     String
  category                 String?
  brand                    String?
  unitCost                 Decimal       @map("unit_cost") @db.Decimal(12, 4)
  basePrice                Decimal       @map("base_price") @db.Decimal(12, 4)
  currentPrice             Decimal       @map("current_price") @db.Decimal(12, 4)
  holdingCostPerUnitPerDay Decimal       @default(0) @map("holding_cost_per_unit_per_day") @db.Decimal(12, 4)
  clearanceEndDate         DateTime      @map("clearance_end_date") @db.Date
  status                   ProductStatus @default(active)
  createdAt                DateTime      @default(now()) @map("created_at") @db.Timestamptz

  inventories         Inventory[]
  priceHistories      PriceHistory[]
  sales               SalesDaily[]
  elasticityEstimate  ElasticityEstimate?
  competitorPrices    CompetitorPrice[]
  markdownEvaluations MarkdownEvaluation[]
  markdownActions     MarkdownActionLog[]

  @@index([clearanceEndDate], map: "idx_products_clearance_end_date")
  @@map("products")
}

model Inventory {
  productId   BigInt @map("product_id")
  location    String @default("main")
  stockOnHand Int    @map("stock_on_hand")
  reserved    Int    @default(0)

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([productId, location])
  @@map("inventory")
}

model PriceHistory {
  id          BigInt    @id @default(autoincrement()) @map("price_id")
  productId   BigInt    @map("product_id")
  price       Decimal   @db.Decimal(12, 4)
  markdownPct Decimal   @default(0) @map("markdown_pct") @db.Decimal(5, 2)
  startedAt   DateTime  @default(now()) @map("started_at") @db.Timestamptz
  endedAt     DateTime? @map("ended_at") @db.Timestamptz

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("price_history")
}

model SalesDaily {
  productId    BigInt   @map("product_id")
  saleDate     DateTime @map("sale_date") @db.Date
  unitsSold    Int      @map("units_sold")
  avgUnitPrice Decimal  @map("avg_unit_price") @db.Decimal(12, 4)
  promoFlag    Boolean  @default(false) @map("promo_flag")

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([productId, saleDate])
  @@index([saleDate], map: "idx_sales_daily_date")
  @@map("sales_daily")
}

model ElasticityEstimate {
  productId   BigInt   @id @map("product_id")
  elasticity  Decimal  @db.Decimal(8, 4)
  method      String
  sampleSize  Int?     @map("sample_size")
  confidence  Decimal? @db.Decimal(5, 2)
  lastUpdated DateTime @default(now()) @map("last_updated") @db.Timestamptz

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("elasticity_estimates")
}

model Competitor {
  id   BigInt  @id @default(autoincrement()) @map("competitor_id")
  name String  @unique
  url  String?

  prices CompetitorPrice[]

  @@map("competitors")
}

model CompetitorPrice {
  competitorId BigInt   @map("competitor_id")
  productId    BigInt   @map("product_id")
  priceDate    DateTime @map("price_date") @db.Date
  price        Decimal  @db.Decimal(12, 4)

  competitor Competitor @relation(fields: [competitorId], references: [id], onDelete: Cascade)
  product    Product    @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([competitorId, productId, priceDate])
  @@index([priceDate], map: "idx_competitor_prices_date")
  @@map("competitor_prices")
}

model MarkdownEvaluation {
  id                     BigInt   @id @default(autoincrement()) @map("eval_id")
  productId              BigInt   @map("product_id")
  evaluatedAt            DateTime @default(now()) @map("evaluated_at") @db.Timestamptz
  baselinePrice          Decimal  @map("baseline_price") @db.Decimal(12, 4)
  baselineExpectedUnits  Int      @map("baseline_expected_units")
  baselineExpectedProfit Decimal  @map("baseline_expected_profit") @db.Decimal(14, 4)
  markdownPct            Decimal  @map("markdown_pct") @db.Decimal(5, 2)
  candidatePrice         Decimal  @map("candidate_price") @db.Decimal(12, 4)
  expectedUnits          Int      @map("expected_units")
  expectedProfit         Decimal  @map("expected_profit") @db.Decimal(14, 4)
  expectedDaysToSell     Int?     @map("expected_days_to_sell")
  expectedUnsoldUnits    Int?     @map("expected_unsold_units")
  isOptimal              Boolean  @default(false) @map("is_optimal")

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("markdown_evaluations")
}

model MarkdownActionLog {
  id                  BigInt   @id @default(autoincrement()) @map("action_id")
  productId           BigInt   @map("product_id")
  executedAt          DateTime @default(now()) @map("executed_at") @db.Timestamptz
  beforePrice         Decimal  @map("before_price") @db.Decimal(12, 4)
  afterPrice          Decimal  @map("after_price") @db.Decimal(12, 4)
  stockAtAction       Int      @map("stock_at_action")
  expectedProfit      Decimal  @map("expected_profit") @db.Decimal(14, 4)
  baselineProfit      Decimal  @map("baseline_profit") @db.Decimal(14, 4)
  deltaExpectedProfit Decimal  @map("delta_expected_profit") @db.Decimal(14, 4)
  notes               String?

  product  Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  outcomes ActionOutcome[]

  @@map("markdown_actions_log")
}

model ActionOutcome {
  actionId        BigInt   @map("action_id")
  windowStart     DateTime @map("window_start") @db.Timestamptz
  windowEnd       DateTime @map("window_end") @db.Timestamptz
  actualUnitsSold Int      @map("actual_units_sold")
  actualProfit    Decimal  @map("actual_profit") @db.Decimal(14, 4)

  action MarkdownActionLog @relation(fields: [actionId], references: [id], onDelete: Cascade)

  @@id([actionId, windowStart, windowEnd])
  @@map("action_outcomes")
}

model Setting {
  key       String   @id
  value     Json     @db.JsonB
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz

  @@map("settings")
}
