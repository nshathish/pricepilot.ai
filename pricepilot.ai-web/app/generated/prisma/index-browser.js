
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  sku: 'sku',
  name: 'name',
  category: 'category',
  brand: 'brand',
  unitCost: 'unitCost',
  basePrice: 'basePrice',
  currentPrice: 'currentPrice',
  holdingCostPerUnitPerDay: 'holdingCostPerUnitPerDay',
  expiryDate: 'expiryDate',
  status: 'status',
  seasonality: 'seasonality',
  tags: 'tags',
  minStockLevel: 'minStockLevel',
  maxStockLevel: 'maxStockLevel',
  createdAt: 'createdAt'
};

exports.Prisma.InventoryScalarFieldEnum = {
  productId: 'productId',
  location: 'location',
  stockOnHand: 'stockOnHand',
  reserved: 'reserved'
};

exports.Prisma.PriceHistoryScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  price: 'price',
  markdownPct: 'markdownPct',
  startedAt: 'startedAt',
  endedAt: 'endedAt'
};

exports.Prisma.SalesDailyScalarFieldEnum = {
  productId: 'productId',
  saleDate: 'saleDate',
  unitsSold: 'unitsSold',
  avgUnitPrice: 'avgUnitPrice',
  promoFlag: 'promoFlag',
  channelId: 'channelId',
  returnRate: 'returnRate',
  grossMargin: 'grossMargin'
};

exports.Prisma.ElasticityEstimateScalarFieldEnum = {
  productId: 'productId',
  elasticity: 'elasticity',
  method: 'method',
  sampleSize: 'sampleSize',
  confidence: 'confidence',
  featuresUsed: 'featuresUsed',
  featureCount: 'featureCount',
  modelRSquared: 'modelRSquared',
  featureCoefficients: 'featureCoefficients',
  lastUpdated: 'lastUpdated'
};

exports.Prisma.ChannelScalarFieldEnum = {
  id: 'id',
  name: 'name',
  averageConversionRate: 'averageConversionRate',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.CampaignScalarFieldEnum = {
  id: 'id',
  name: 'name',
  campaignType: 'campaignType',
  startDate: 'startDate',
  endDate: 'endDate',
  targetAudience: 'targetAudience',
  budget: 'budget',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.CampaignChannelScalarFieldEnum = {
  campaignId: 'campaignId',
  channelId: 'channelId',
  channelBudget: 'channelBudget',
  priority: 'priority',
  customMessage: 'customMessage',
  createdAt: 'createdAt'
};

exports.Prisma.CompetitorScalarFieldEnum = {
  id: 'id',
  name: 'name',
  url: 'url'
};

exports.Prisma.CompetitorPriceScalarFieldEnum = {
  competitorId: 'competitorId',
  productId: 'productId',
  priceDate: 'priceDate',
  price: 'price'
};

exports.Prisma.MarkdownEvaluationScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  evaluatedAt: 'evaluatedAt',
  baselinePrice: 'baselinePrice',
  baselineExpectedUnits: 'baselineExpectedUnits',
  baselineExpectedProfit: 'baselineExpectedProfit',
  markdownPct: 'markdownPct',
  candidatePrice: 'candidatePrice',
  expectedUnits: 'expectedUnits',
  expectedProfit: 'expectedProfit',
  expectedDaysToSell: 'expectedDaysToSell',
  expectedUnsoldUnits: 'expectedUnsoldUnits',
  isOptimal: 'isOptimal'
};

exports.Prisma.MarkdownActionLogScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  executedAt: 'executedAt',
  beforePrice: 'beforePrice',
  afterPrice: 'afterPrice',
  stockAtAction: 'stockAtAction',
  expectedProfit: 'expectedProfit',
  baselineProfit: 'baselineProfit',
  deltaExpectedProfit: 'deltaExpectedProfit',
  notes: 'notes',
  markdownPct: 'markdownPct',
  confidenceScore: 'confidenceScore',
  triggerReason: 'triggerReason',
  approvalStatus: 'approvalStatus',
  campaignId: 'campaignId'
};

exports.Prisma.ActionOutcomeScalarFieldEnum = {
  actionId: 'actionId',
  windowStart: 'windowStart',
  windowEnd: 'windowEnd',
  actualUnitsSold: 'actualUnitsSold',
  actualProfit: 'actualProfit'
};

exports.Prisma.SettingScalarFieldEnum = {
  key: 'key',
  value: 'value',
  settingType: 'settingType',
  description: 'description',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  tableName: 'tableName',
  recordId: 'recordId',
  action: 'action',
  oldValues: 'oldValues',
  newValues: 'newValues',
  changeSource: 'changeSource',
  changedAt: 'changedAt'
};

exports.Prisma.PerformanceMetricScalarFieldEnum = {
  id: 'id',
  metricName: 'metricName',
  metricValue: 'metricValue',
  dimensions: 'dimensions',
  measuredAt: 'measuredAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.ProductStatus = exports.$Enums.ProductStatus = {
  active: 'active',
  discontinued: 'discontinued'
};

exports.Seasonality = exports.$Enums.Seasonality = {
  spring: 'spring',
  summer: 'summer',
  fall: 'fall',
  winter: 'winter',
  year_round: 'year_round'
};

exports.CampaignType = exports.$Enums.CampaignType = {
  flash_sale: 'flash_sale',
  clearance: 'clearance',
  seasonal: 'seasonal',
  cross_promotion: 'cross_promotion',
  end_of_life: 'end_of_life'
};

exports.CampaignStatus = exports.$Enums.CampaignStatus = {
  draft: 'draft',
  active: 'active',
  paused: 'paused',
  completed: 'completed',
  cancelled: 'cancelled'
};

exports.ApprovalStatus = exports.$Enums.ApprovalStatus = {
  pending: 'pending',
  approved: 'approved',
  auto_approved: 'auto_approved',
  rejected: 'rejected'
};

exports.AuditAction = exports.$Enums.AuditAction = {
  INSERT: 'INSERT',
  UPDATE: 'UPDATE',
  DELETE: 'DELETE',
  TRUNCATE: 'TRUNCATE'
};

exports.ChangeSource = exports.$Enums.ChangeSource = {
  system: 'system',
  ai_agent: 'ai_agent',
  manual: 'manual',
  api: 'api',
  migration: 'migration',
  scheduled_job: 'scheduled_job'
};

exports.Prisma.ModelName = {
  Product: 'Product',
  Inventory: 'Inventory',
  PriceHistory: 'PriceHistory',
  SalesDaily: 'SalesDaily',
  ElasticityEstimate: 'ElasticityEstimate',
  Channel: 'Channel',
  Campaign: 'Campaign',
  CampaignChannel: 'CampaignChannel',
  Competitor: 'Competitor',
  CompetitorPrice: 'CompetitorPrice',
  MarkdownEvaluation: 'MarkdownEvaluation',
  MarkdownActionLog: 'MarkdownActionLog',
  ActionOutcome: 'ActionOutcome',
  Setting: 'Setting',
  AuditLog: 'AuditLog',
  PerformanceMetric: 'PerformanceMetric'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
